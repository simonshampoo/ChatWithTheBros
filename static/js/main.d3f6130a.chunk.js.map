{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","widt","renderMessages","height","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3f6130a.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { sendMessage, isTyping } from 'react-chat-engine'\r\nimport { SendOutlined, PictureOutlined} from '@ant-design/icons'\r\nconst MessageForm = (props) => {\r\n    const [value, setValue] = useState('')\r\n    const { chatId, creds } = props;\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const text = value.trim();\r\n\r\n        if (text.length > 0) sendMessage(creds, chatId, { text })\r\n\r\n        setValue('');\r\n    }\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n\r\n        isTyping(props, chatId);\r\n    }\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, {files : event.target.files, text : ''})\r\n    }\r\n    return (\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"message-input\"\r\n                placeholder=\"Send a message!\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                onSubmit={handleSubmit}\r\n            />\r\n            <label htmlFor = \"upload-button\">\r\n                <span className = \"image-button\">\r\n                    <PictureOutlined className = \"picture-icon\"/>\r\n                </span>\r\n            </label>\r\n            <input \r\n                type = \"file\"\r\n                multiple = {false}\r\n                id = \"upload-button\"\r\n                style = {{display: 'none'}}\r\n                onChange = {handleUpload}\r\n            />\r\n            <button type = \"submit\" className = \"send-button\">\r\n                <SendOutlined className = 'send-icon'/>\r\n            </button>\r\n        </form>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default MessageForm; ","const MyMessage = ({ message }) => {\r\n    if (message.attachments && message.attachments.length > 0) {\r\n        return (\r\n            <img\r\n                src={message.attachments[0].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{ float: 'right' }}\r\n            />\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50' }}>\r\n          {message.text}\r\n        </div>\r\n      );\r\n    };\r\n\r\nexport default MyMessage; ","const TheirMessage = ({ lastMessage, message }) => {\r\n    const isFirstMessageByUser =\r\n      !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n  \r\n    return (\r\n      <div className=\"message-row\">\r\n        {isFirstMessageByUser && (\r\n          <div\r\n            className=\"message-avatar\"\r\n            style={{\r\n              backgroundImage: message.sender && `url(${message.sender.avatar})`,\r\n            }}\r\n          />\r\n        )}\r\n  \r\n        {message.attachments && message.attachments.length > 0 ? (\r\n          <img\r\n            src={message.attachments[0].file}\r\n            alt=\"message-attachment\"\r\n            className=\"message-image\"\r\n            style={{ marginLeft: isFirstMessageByUser ? \"4px\" : \"48px\" }}\r\n          />\r\n        ) : (\r\n          <div\r\n            className=\"message\"\r\n            style={{\r\n              float: \"left\",\r\n              backgroundColor: \"#CABCDC\",\r\n              marginLeft: isFirstMessageByUser ? \"4px\" : \"48px\",\r\n            }}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  export default TheirMessage;\r\n  ","import MessageForm from \"./MessageForm\";\r\nimport MyMessage from \"./MyMessage\";\r\nimport TheirMessage from \"./TheirMessage\";\r\n\r\nconst ChatFeed = (props) => {\r\n  const { chats, activeChat, userName, messages } = props;\r\n\r\n  const chat = chats && chats[activeChat];\r\n\r\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\r\n    <div\r\n      key={`read_${index}`}\r\n      className=\"read-receipt\"\r\n      style={{\r\n        float: isMyMessage ? 'right' : 'left',\r\n        backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\r\n      }}\r\n    />\r\n  ));\r\n\r\n  const renderMessages = () => {\r\n    const keys = Object.keys(messages);\r\n\r\n    return keys.map((key, index) => {\r\n      const message = messages[key];\r\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n      const isMyMessage = userName === message.sender.username;\r\n\r\n      return (\r\n        <div key={\"msg_${index}\"} style={{ widt: \"100%\" }}>\r\n          <div className=\"message-block\">\r\n            {isMyMessage ? (\r\n              <MyMessage message={message} />\r\n            ) : (\r\n              <TheirMessage\r\n                message={message}\r\n                lastMessage={messages[lastMessageKey]}\r\n              />\r\n            )}\r\n          </div>\r\n          <div\r\n            className=\"read-receipts\"\r\n            style={{\r\n              marginRight: isMyMessage ? \"18px\" : \"0px\",\r\n              marginLeft: isMyMessage ? \"0px\" : \"68px\",\r\n            }}\r\n          >\r\n            {renderReadReceipts(message, isMyMessage)}\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  if (!chat) return <div />;\r\n\r\n  return (\r\n    <div className=\"chat-feed\">\r\n      <div className=\"chat-title-container\">\r\n        <div className=\"chat-title\">{chat?.title}</div>\r\n        <div className=\"chat-subtitle\">\r\n          {chat.people.map((person) => ` ${person.person.username}`)}\r\n        </div>\r\n      </div>\r\n      {renderMessages()}\r\n      <div style={{ height: \"100px\" }} />\r\n      <div className=\"message-form-container\">\r\n        <MessageForm {...props} chatId={activeChat} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatFeed;\r\n","import { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst LoginForm = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const authObject = {\r\n      \"Project-ID\": \"d934060c-3542-4a21-9494-e215f9d7a868\",\r\n      \"User-Name\": username,\r\n      \"User-Secret\": password,\r\n    };\r\n    try {\r\n      await axios.get(\"https://api.chatengine.io/chats\", {\r\n        headers: authObject,\r\n      });\r\n      localStorage.setItem(\"username\", username);\r\n      localStorage.setItem(\"password\", password);\r\n\r\n      window.location.reload();\r\n    } catch (error) {\r\n      setError(\"Wrong username/password\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"form\">\r\n        <h1 className=\"title\">ChatWithTheBros</h1>\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            className=\"input\"\r\n            placeholder=\"Username\"\r\n            required\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            className=\"input\"\r\n            placeholder=\"Password\"\r\n            required\r\n          />\r\n          <div align=\"center\">\r\n            <button type=\"submit\" className=\"button\">\r\n              <span>Start Chatting!</span>\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <h1>{error}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import './App.css';\nimport { ChatEngine } from 'react-chat-engine';\nimport ChatFeed from './components/ChatFeed';\nimport LoginForm from './components/LoginForm'\n\nconst App = () => {\n  if (!localStorage.getItem('username')) return <LoginForm />\n  return (\n    <ChatEngine \n      height = \"100vh\"\n      projectID = \"d934060c-3542-4a21-9494-e215f9d7a868\"\n      userName = {localStorage.getItem('username')}\n      userSecret = {localStorage.getItem('password')}\n      renderChatFeed = {(chatAppProps) => <ChatFeed {...chatAppProps}/>}\n    />\n  )\n}\n\nexport default App; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}